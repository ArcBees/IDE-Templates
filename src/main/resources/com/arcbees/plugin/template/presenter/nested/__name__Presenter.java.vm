#if ( $revealType == "Root")
	#set( $revealType = "RevealType.Root" )
#elseif( $revealType == "RootLayout" )
	#set( $revealType = "RevealType.RootLayout" )
#elseif ( $revealType == "RootPopup" )
	#set( $revealType = "RevealType.RootPopup" )
#end

#if ( $uihandlers )
	#set( $implements = "implements ${name}UiHandlers" )
	#set( $extendsView = ", HasUiHandlers<${name}UiHandlers>" )
#else
	#set( $implements = "" )
	#set( $extendsView = "" )
#end

#if ( $codesplit )
	#set( $proxy = "@ProxyCodeSplit" )
#else
	#set( $proxy = "@ProxyStandard" )
#end

#if ( $isplace ) 
	#set( $nametokenrendered = "@NameToken(${nametoken})" )
	#set( $proxyExtends = "ProxyPlace" )
#else 
	#set( $nametokenrendered = "" )
	#set( $proxyExtends = "Proxy" )
#end

package ${package};

import com.google.gwt.event.shared.GwtEvent.Type;
import com.google.inject.Inject;
import com.google.web.bindery.event.shared.EventBus;
import com.gwtplatform.mvp.client.Presenter;
import com.gwtplatform.mvp.client.View;
import com.gwtplatform.mvp.client.annotations.ContentSlot;
import com.gwtplatform.mvp.client.annotations.ProxyStandard;
import com.gwtplatform.mvp.client.proxy.Proxy;
import com.gwtplatform.mvp.client.proxy.ProxyPlace;
import com.gwtplatform.mvp.client.proxy.RevealContentHandler;
import com.gwtplatform.mvp.client.HasUiHandlers;
import com.gwtplatform.mvp.client.proxy.PlaceRequest;
import com.gwtplatform.mvp.client.annotations.NameToken;
import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
import com.gwtplatform.mvp.client.presenter.slots.NestedSlot;
${contentSlotImport}
${nameTokenImport}

public class ${name}Presenter extends Presenter<${name}Presenter.MyView, ${name}Presenter.MyProxy> $implements {
    interface MyView extends View $extendsView {
    }

    ${nametokenrendered}
    ${proxy}
    interface MyProxy extends ${proxyExtends}<${name}Presenter> {
    }

    public static final NestedSlot SLOT_${name.toUpperCase()} = new NestedSlot();

    @Inject
    ${name}Presenter(
    		EventBus eventBus, 
    		MyView view, 
    		MyProxy proxy) {
        super(eventBus, view, proxy, ${revealType});
        
        #if( $uihandlers )
        getView().setUiHandlers(this);
        #end
    }
	
	#if( $manualreveal )
	@Override
	public boolean useManualReveal() {
		return true;
	}
	#end
}
