#if( $uihandlers )
	#set( $implements = "implements ${name}UiHandlers" )
	#set( $extendsView = ", HasUiHandlers<${name}UiHandlers>" )
#else
	#set( $implements = "" )
	#set( $extendsView = "" )
#end

#if ( $codesplit )
	#set( $proxy = "@ProxyCodeSplit" )
#else
	#set( $proxy = "@ProxyStandard" )
#end

#if ( $isplace ) 
	#set( $nametokenrendered = '@NameToken("${nametoken}")' )
#else 
	#set( $nametokenrendered = "" )
#end

package ${package};

import com.google.gwt.event.shared.GwtEvent.Type;
import com.google.inject.Inject;
import com.google.web.bindery.event.shared.EventBus;
import com.gwtplatform.mvp.client.Presenter;
import com.gwtplatform.mvp.client.View;
import com.gwtplatform.mvp.client.annotations.ContentSlot;
import com.gwtplatform.mvp.client.annotations.ProxyStandard;
import com.gwtplatform.mvp.client.proxy.Proxy;
import com.gwtplatform.mvp.client.proxy.RevealContentHandler;
import com.gwtplatform.mvp.client.HasUiHandlers;
import com.gwtplatform.mvp.client.proxy.PlaceRequest;

public class ${name}Presenter extends Presenter<${name}Presenter.MyView, ${name}Presenter.MyProxy> $implements {
    interface MyView extends View $extendsView {
    }

    @ContentSlot
    public static final Type<RevealContentHandler<?>> SLOT_${name} = new Type<RevealContentHandler<?>>();

	${nametokenrendered}
    ${proxy}
    public interface MyProxy extends Proxy<${name}Presenter> {
    }

    @Inject
    public ${name}Presenter(
    		EventBus eventBus, 
    		MyView view, 
    		MyProxy proxy) {
        super(eventBus, view, proxy, RevealType.Root);
        
        #if( $uihandlers ) 
        getView().setUiHandlers(this);
        #end
    }
	
	#if( $onbind )
	protected void onBind() {
		super.onBind();
	}
	#end
	
	#if( $onreveal )
	protected void onReveal() {
		super.onReveal();
	}
	#end
	
	#if( $onhide )
	protected void onHide() {
		super.onHide();
	}
	#end
	
	#if( $onunbind )
	protected void onUnbind() {
		super.onUnbind();
	}
	#end
	
	#if( $onreset )
	protected void onReset() {
		super.onReset();
	}
	#end
	
	#if( $manualreveal )
	@Override
	public boolean useManualReveal() {
		return true;
	}
	#end
	
	#if ( $preparefromrequest )
	@Override
	public void prepareFromRequest(PlaceRequest request) {
		super.prepareFromRequest(request);
	}
	#end
	
}
